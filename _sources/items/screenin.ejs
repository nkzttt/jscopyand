<!-- prettier-ignore -->
<% const localTitle = '画面に入ったら〜'; %>

<!-- prettier-ignore -->
<% const demo = `
<div class="demo" data-js-selector="source" data-js-attributes="demoHtml">
  <style>
    .demoScrollIn {
      margin-top: 100vh;
    }
  </style>
  <p>スクロールしてください。特定の要素が画面内に入るとアラートが出ます。</p>
  <p data-jscopyand="scrollin" class="demoScrollIn">１番目です。</p>
  <p data-jscopyand="scrollin" class="demoScrollIn">２番目です。</p>
</div>
`; %>

<!-- prettier-ignore -->
<% const demoScript = `
<script data-js-selector="sourceLazy" data-js-attributes="jscopyand">
  (function () {
    var targets = document.querySelectorAll('[data-jscopyand="scrollin"]');
    var callback = function (target) {
      alert(target.innerText);
    };
    var observer = new IntersectionObserver(
      function (entries) {
        if (entries[0].isIntersecting) {
          callback(entries[0].target);
          observer.unobserve(entries[0].target);
        }
      },
      {
        rootMargin: '0px',
        threshold: 1.0,
      }
    );
    targets.forEach(function (target) {
      observer.observe(target);
    });
  })();
</script>
`; %>

<!-- prettier-ignore -->
<% const howToUse = `
<div class="howToUse">
  <p class="howToUse__description">
    画面に入ったことを検知したい要素に対して
    <code class="inlineCode">data-jscopyand="scrollin"</code
    >を付与してください。<br />
    任意の処理を<code class="inlineCode">callback</code
    >関数の中に記述してください。<br />
  </p>
  <div>
    <p class="button" data-js-selector="accordion" data-js-attributes="remove">
      サンプルHTMLを表示する
    </p>
    <pre><code class="language-html" data-js-selector="demoHtml"></code></pre>
  </div>
</div>
`; %>

<!-- prettier-ignore -->
<% const jsDescription = `
<div class="jsDescription">
  <p
    class="button"
    data-js-selector="accordion"
    data-js-attributes="remove"
    onclick="gtag('event', 'cv', { event_category: 'openedJsCodes' })"
  >
    JSコードの解説を見てみる
  </p>
  <div class="jsDescription__body">
    <p class="jsDescription__body__text">
      監視対象となる要素全てを<code class="inlineCode"
        >document.querySelectorAll</code
      >で取得し、変数に格納します。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 2"></code></pre>
    <p class="jsDescription__body__text">
      画面に入った時に処理したい内容を関数で定義します。<br />
      引数には画面に入った要素が渡ってくるようにします。<br />
      本デモでは画面に入った要素のテキストをアラートで出すようにしています。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 3, 5"></code></pre>
    <p class="jsDescription__body__text">
      監視の設定を行なっていきます。<br />
      <code class="inlineCode">new IntersectionObserver</code
      >の戻り値を使うことで監視ができます。<br />
      この戻り値を変数に格納します。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 6"></code></pre>
    <p class="jsDescription__body__text">
      <code class="inlineCode">IntersectionObserver</code
      >の第１引数には、監視対象要素が画面に入った・出たときの処理を書いていきます。<br />
      <code class="inlineCode">entries[0]</code
      >には監視情報が入っています。<br />
      画面に入った時を判断するには、<code class="inlineCode"
        >entries[0].isIntersecting</code
      >が<code class="inlineCode">true</code>かどうか？を確認します。<br />
      <code class="inlineCode">entries[0].target</code
      >には監視対象要素が入っているため、これを関数<code class="inlineCode"
        >callback</code
      >に渡します。<br />
      一度画面に入ったら監視は不要のため、<code class="inlineCode"
        >observer.unobserve(entries[0].target)</code
      >で監視を解除しておきます。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 7, 12"></code></pre>
    <p class="jsDescription__body__text">
      <code class="inlineCode">IntersectionObserver</code
      >の第２引数には監視の設定を書いていきます。<br />
      <code class="inlineCode">rootMargin</code
      >を指定すれば画面内に入ったと判断する境界位置をずらすことができます。<br />
      <code class="inlineCode">threshold</code
      >は対象要素が何割画面に入ったら、という割合を指定することができます。<br />
      本デモでは対象要素の全体が画面内に入ったら、という設定にしています。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 13, 16"></code></pre>
    <p class="jsDescription__body__text">
      <code class="inlineCode">targets</code
      >を反復処理して監視を開始します。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 18, 20"></code></pre>
  </div>
</div>
`; %>

<!-- prettier-ignore -->
<%- include('../_ejsModules/itemLayout', { localTitle, demo, demoScript, howToUse, jsDescription }) %>
