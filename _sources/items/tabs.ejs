<!-- prettier-ignore -->
<% const localTitle = 'タブ'; %>

<!-- prettier-ignore -->
<% const demo = `
<div class="demo" data-js-selector="source" data-js-attributes="demoHtml">
  <style>
    .demoTabMenu {
      display: flex;
    }
    .demoTabMenu > .active {
      color: red;
    }
  </style>
  <div data-jscopyand="tab">
    <div class="demoTabMenu">
      <p>タブ１</p>
      <p>タブ２</p>
      <p>タブ３</p>
    </div>
    <div>
      <p>現在１番目のタブを選択中です。</p>
      <p>現在２番目のタブを選択中です。</p>
      <p>現在３番目のタブを選択中です。</p>
    </div>
  </div>
</div>
`; %>

<!-- prettier-ignore -->
<% const demoScript = `
<script data-js-selector="sourceLazy" data-js-attributes="jscopyand">
  (function () {
    var tab = document.querySelector('[data-jscopyand="tab"]');
    var tabMenu = tab.children[0];
    var tabBody = tab.children[1];
    var triggers = Array.from(tabMenu.children);
    var bodys = Array.from(tabBody.children);
    bodys.forEach(function (body) {
      body.style.display = 'none';
    });
    var activate = function (index) {
      triggers[index].classList.add('active');
      bodys[index].style.display = '';
    };
    var deactivate = function (index) {
      triggers[index].classList.remove('active');
      bodys[index].style.display = 'none';
    };
    var activeIndex = 0;
    activate(activeIndex);
    triggers.forEach(function (trigger, index) {
      var boundedIndex = index;
      trigger.addEventListener('click', function () {
        deactivate(activeIndex);
        activeIndex = boundedIndex;
        activate(activeIndex);
      });
    });
  })();
</script>
`; %>

<!-- prettier-ignore -->
<% const howToUse = `
<div class="howToUse">
  <p class="howToUse__description">
    まず<code class="inlineCode">div</code>要素（①）を１つ作り、そこに<code
      class="inlineCode"
      >data-jscopyand="tab"</code
    >を付与してください。<br />
    続いて①の子要素で、トリガー要素をまとめる<code class="inlineCode">div</code
    >要素（②）を１つ、切り替わるコンテンツ要素をまとめる<code class="inlineCode"
      >div</code
    >要素（③）を１つ作ってください。<br />
    最後に②と③の子要素に必要な数のトリガー・コンテンツ要素を作ってください。<br />
    <br />
    関連するトリガー要素のコンテンツ要素の順番は同じになるようにしてください。<br />
    ２番目のトリガー要素がクリックされたら２番目のコンテンツ要素を表示する、という仕組みになっています。<br />
  </p>
  <div>
    <p class="button" data-js-selector="accordion" data-js-attributes="remove">
      サンプルHTMLを表示する
    </p>
    <pre><code class="language-html" data-js-selector="demoHtml"></code></pre>
  </div>
</div>
`; %>

<!-- prettier-ignore -->
<% const jsDescription = `
<div class="jsDescription">
  <p class="button" data-js-selector="accordion" data-js-attributes="remove">
    JSコードの解説を見てみる
  </p>
  <div class="jsDescription__body">
    <p class="jsDescription__body__text">
      まずは<code class="inlineCode">document.querySelector</code
      >でタブ要素を特定し、変数<code class="inlineCode">tab</code
      >に格納します。<br />
      続いて子要素の１番目をトリガー要素のまとまりとして変数<code
        class="inlineCode"
        >tabMenu</code
      >に、２番目をコンテンツ要素のまとまりとして変数<code class="inlineCode"
        >tabBody</code
      >に格納します。<br />
      そこからさらにそれぞれの子要素を取得して変数に格納します。<br />
      この時に<code class="inlineCode">Array.from()</code>としているのは、<code
        class="inlineCode"
        >children</code
      >で取得できる値が配列に似たループ処理ができない値であるため、ループ処理可能な値に変換しているためです。<br />
      コンテンツ要素の変数<code class="inlineCode">bodys</code
      >はループ処理で最初に全て非表示にしておきます。<br />
      アクティブクラスの付与と表示状態（<code class="inlineCode"
        >display: none;</code
      >を削除）にする関数<code class="inlineCode">activate</code
      >と、その逆の関数<code class="inlineCode">deactivate</code
      >を定義します。<br />
      現在のアクティブなタブ番号を保持する変数<code class="inlineCode"
        >activeIndex</code
      >を用意し、初期状態では１番目が選択されるようにしておきます。<br />
      最後にクリックベントを登録し、表示切り替え関数を呼び出すとともに<code
        class="inlineCode"
        >activeIndex</code
      >を更新します。<br />
    </p>
  </div>
</div>
`; %>

<!-- prettier-ignore -->

<%- include('../_ejsModules/itemLayout', { localTitle, demo, demoScript, howToUse, jsDescription }) %>
