<!-- prettier-ignore -->
<% const localTitle = 'タブ'; %>

<!-- prettier-ignore -->
<% const demo = `
<div class="demo" data-js-selector="source" data-js-attributes="demoHtml">
  <style>
    .demoTabMenu {
      display: flex;
    }
    .demoTabMenu > .active {
      color: red;
    }
  </style>
  <div data-jscopyand="tab">
    <div class="demoTabMenu">
      <p>タブ１</p>
      <p>タブ２</p>
      <p>タブ３</p>
    </div>
    <div>
      <p>現在１番目のタブを選択中です。</p>
      <p>現在２番目のタブを選択中です。</p>
      <p>現在３番目のタブを選択中です。</p>
    </div>
  </div>
</div>
`; %>

<!-- prettier-ignore -->
<% const demoScript = `
<script data-js-selector="sourceLazy" data-js-attributes="jscopyand">
  (function () {
    var tab = document.querySelector('[data-jscopyand="tab"]');
    var triggers = Array.from(tab.children[0].children);
    var bodies = Array.from(tab.children[1].children);
    bodies.forEach(function (body) {
      body.style.display = 'none';
    });
    var activate = function (index) {
      triggers[index].classList.add('active');
      bodies[index].style.display = '';
    };
    var deactivate = function (index) {
      triggers[index].classList.remove('active');
      bodies[index].style.display = 'none';
    };
    var activeIndex = 0;
    activate(activeIndex);
    triggers.forEach(function (trigger, index) {
      trigger.addEventListener('click', function () {
        deactivate(activeIndex);
        activeIndex = index;
        activate(activeIndex);
      });
    });
  })();
</script>
`; %>

<!-- prettier-ignore -->
<% const howToUse = `
<div class="howToUse">
  <p class="howToUse__description">
    まず<code class="inlineCode">div</code>要素（①）を１つ作り、そこに<code
      class="inlineCode"
      >data-jscopyand="tab"</code
    >を付与してください。<br />
    続いて①の子要素で、トリガー要素をまとめる<code class="inlineCode">div</code
    >要素（②）を１つ、切り替わるコンテンツ要素をまとめる<code class="inlineCode"
      >div</code
    >要素（③）を１つ作ってください。<br />
    最後に②と③の子要素に必要な数のトリガー・コンテンツ要素を作ってください。<br />
    <br />
    関連するトリガー要素のコンテンツ要素の順番は同じになるようにしてください。<br />
    ２番目のトリガー要素がクリックされたら２番目のコンテンツ要素を表示する、という仕組みになっています。<br />
  </p>
  <div>
    <p class="button" data-js-selector="accordion" data-js-attributes="remove">
      サンプルHTMLを表示する
    </p>
    <pre><code class="language-html" data-js-selector="demoHtml"></code></pre>
  </div>
</div>
`; %>

<!-- prettier-ignore -->
<% const jsDescription = `
<div class="jsDescription">
  <p
    class="button"
    data-js-selector="accordion"
    data-js-attributes="remove"
    onclick="gtag('event', 'cv', { event_category: 'openedJsCodes' })"
  >
    JSコードの解説を見てみる
  </p>
  <div class="jsDescription__body">
    <p class="jsDescription__body__text">
      タブ要素を特定し、変数に格納します。<br />
      タブ要素の１番目の子要素をトリガー要素のまとまり、２番目の子要素をコンテンツ要素のまとまりとしてそれぞれ変数に格納します。<br />
      <code class="inlineCode">children</code
      >で取得した値はそのままでは反復処理ができないため、<code
        class="inlineCode"
        >Array.from()</code
      >で配列に変換します。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 2, 4"></code></pre>
    <p class="jsDescription__body__text">
      コンテンツ要素は反復処理で一度全て非表示にしておきます。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 5, 7"></code></pre>
    <p class="jsDescription__body__text">
      表示状態を切り替える関数を定義します。<br />
      引数には何番目を表示・非表示にするか？という値を受け取ります。<br />
      この引数を利用して、トリガー要素はアクティブクラスの付け替え、コンテンツ要素は<code
        class="inlineCode"
        >display</code
      >スタイルで表示の切り替えを行います。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 8, 15"></code></pre>
    <p class="jsDescription__body__text">
      現在のアクティブなタブ番号を保持する変数を用意します。<br />
      初期状態では１番目が選択されるように<code class="inlineCode">0</code
      >を設定し、関数<code class="inlineCode">activate</code
      >を呼んで１番目を表示しておきます。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 16, 17"></code></pre>
    <p class="jsDescription__body__text">
      全てのトリガー要素にクリックイベントを設定するため、反復処理を行います。<br />
      表示切り替え関数を呼び出すとともに<code class="inlineCode"
        >activeIndex</code
      >を更新します。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 18, 24"></code></pre>
  </div>
</div>
`; %>

<!-- prettier-ignore -->

<%- include('../_ejsModules/itemLayout', { localTitle, demo, demoScript, howToUse, jsDescription }) %>
