<!-- prettier-ignore -->
<% const localTitle = '間引き（throttle / debounce）'; %>

<!-- prettier-ignore -->
<% const demo = `
<div class="demo" data-js-selector="source" data-js-attributes="demoHtml">
  <p>この機能にはデモはありません</p>
</div>
`; %>

<!-- prettier-ignore -->
<% const demoScript = `
<script data-js-selector="sourceLazy" data-js-attributes="jscopyand">
  var throttle = (function () {
    var callCount = 0;
    return function (cb) {
      if (++callCount % 10 === 0) cb();
    };
  })();
  var debounce = (function () {
    var timer;
    return function (cb) {
      clearTimeout(timer);
      timer = setTimeout(function () {
        cb();
      }, 300);
    };
  })();
</script>
`; %>
<script>
  // test code
  window.addEventListener('scroll', function () {
    throttle(function () {
      console.log('scroll');
    });
  });
  window.addEventListener('resize', function () {
    debounce(function () {
      console.log('resize');
    });
  });
</script>

<!-- prettier-ignore -->
<% const howToUse = `
<div class="howToUse">
  <p class="howToUse__description">
    <code class="inlineCode">throttle</code
    >は連続したイベントを一定間隔で処理します。（本コードは10回に1度）<br />
    <a href="/jscopyand/items/scroll.html" class="textLink"
      >画面をスクロールしたら〜</a
    >などのイベントと組み合わせて使ってください。<br />
    <code class="inlineCode">debounce</code
    >は連続したイベントの最後の1度が処理されます。<br />
    <a href="/jscopyand/items/resize.html" class="textLink"
      >画面をリサイズしたら〜</a
    >などのイベントと組み合わせて使ってください。<br />
  </p>
</div>
`; %>

<!-- prettier-ignore -->
<% const jsDescription = `
<div class="jsDescription">
  <p
    class="button"
    data-js-selector="accordion"
    data-js-attributes="remove"
    onclick="gtag('event', 'cv', { event_category: 'openedJsCodes' })"
  >
    JSコードの解説を見てみる
  </p>
  <div class="jsDescription__body">
    <p class="jsDescription__body__text">
      <code class="inlineCode">throttle</code
      >は即時関数になっており、内部で自身が呼ばれた回数を保持するローカル変数<code
        class="inlineCode"
        >callCount</code
      >を持っています。<br />
      返却された関数はそのローカル変数を参照しており、10回に1度だけコールバック変数を処理するためのカウントアップ処理（<code
        class="inlineCode"
        >++callCount</code
      >）と10の倍数チェック（<code class="inlineCode">callCount % 10 === 0</code
      >）を同時に行っています。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 1, 6"></code></pre>
    <p class="jsDescription__body__text">
      <code class="inlineCode">debounce</code
      >は即時関数になっており、内部でタイマー情報を保持するローカル変数<code
        class="inlineCode"
        >timer</code
      >を持っています。<br />
      返却された関数はそのローカル変数を参照しており、300ミリ秒後にコールバック関数を処理するタイマー設定と、前に呼び出された時から300ミリ秒経過していなければ前をタイマーをキャンセルする、という処理を行っています。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 7, 15"></code></pre>
  </div>
</div>
`; %>

<!-- prettier-ignore -->
<%- include('../_ejsModules/itemLayout', { localTitle, demo, demoScript, howToUse, jsDescription }) %>
