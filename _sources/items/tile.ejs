<!-- prettier-ignore -->
<% const localTitle = 'タイル配置'; %>

<!-- prettier-ignore -->
<% const demo = `
<div class="demo" data-js-selector="source" data-js-attributes="demoHtml">
  <style>
    .demoBox {
      padding: 50px 10px;
      background: white;
    }
  </style>
  <div data-jscopyand="tile">
    <p class="demoBox">コンテンツ</p>
    <p class="demoBox">
      コンテンツ<br />
      コンテンツ<br />
    </p>
    <p class="demoBox">
      コンテンツ<br />
      コンテンツ<br />
      コンテンツ<br />
    </p>
    <p class="demoBox">
      コンテンツ<br />
      コンテンツ<br />
      コンテンツ<br />
    </p>
    <p class="demoBox">コンテンツ</p>
    <p class="demoBox">
      コンテンツ<br />
      コンテンツ<br />
      コンテンツ<br />
      コンテンツ<br />
      コンテンツ<br />
    </p>
    <p class="demoBox">
      コンテンツ<br />
      コンテンツ<br />
    </p>
    <p class="demoBox">
      コンテンツ<br />
      コンテンツ<br />
      コンテンツ<br />
      コンテンツ<br />
      コンテンツ<br />
    </p>
  </div>
</div>
`; %>

<!-- prettier-ignore -->
<% const demoScript = `
<script data-js-selector="sourceLazy" data-js-attributes="jscopyand">
  (function () {
    var colRatio = 33.333;
    var colNum = Math.floor(100 / colRatio);
    var space = 10;
    var tile = document.querySelector('[data-jscopyand="tile"]');
    tile.style =
      'display: flex; flex-wrap: wrap; margin-left: ' + -space + 'px;';
    var items = Array.from(tile.children);
    items.forEach(function (item) {
      var wrapper = document.createElement('div');
      item.parentElement.append(wrapper);
      wrapper.append(item);
      wrapper.style =
        'flex-basis: ' +
        colRatio +
        '%; padding-left: ' +
        space +
        'px; padding-bottom: ' +
        space +
        'px;';
    });
    var columns = [];
    while (items.length) {
      columns.push(items.splice(0, colNum));
    }
    columns.forEach(function (column, colIndex) {
      if (colIndex === 0) return;
      var prevEndPositions = columns[colIndex - 1].map(function (item) {
        return item.getBoundingClientRect().bottom;
      });
      var prevMaxEndPosition = Math.max.apply(null, prevEndPositions);
      column.forEach(function (item, index) {
        item.style.transform =
          'translateY(' +
          (prevEndPositions[index] - prevMaxEndPosition) +
          'px)';
      });
      if (columns.length - 1 === colIndex) {
        var startPosition = tile.getBoundingClientRect().y;
        var endPosition = Math.max.apply(
          null,
          column.map(function (item) {
            return item.getBoundingClientRect().bottom;
          })
        );
        tile.style.height = endPosition - startPosition + 'px';
      }
    });
  })();
</script>
`; %>

<!-- prettier-ignore -->
<% const howToUse = `
<div class="howToUse">
  <p class="howToUse__description">
    タイル配置をしたい任意の場所に<code class="inlineCode">div</code
    >要素を１つ用意し、<code class="inlineCode">data-jscopyand="tile"</code
    >を付与してください。<br />
    子要素には任意の数・任意の要素を配置してください。<br />
  </p>
  <div>
    <p class="button" data-js-selector="accordion" data-js-attributes="remove">
      サンプルHTMLを表示する
    </p>
    <pre><code class="language-html" data-js-selector="demoHtml"></code></pre>
  </div>
</div>
`; %>

<!-- prettier-ignore -->
<% const jsDescription = `
<div class="jsDescription">
  <p
    class="button"
    data-js-selector="accordion"
    data-js-attributes="remove"
    onclick="gtag('event', 'cv', { event_category: 'openedJsCodes' })"
  >
    JSコードの解説を見てみる
  </p>
  <div class="jsDescription__body">
    <p class="jsDescription__body__text">
      最初にタイル配置の設定変数を定義しておきます。<br />
      本デモでは３列にするために、１列の横幅比率は<code class="inlineCode"
        >33.333%</code
      >、余白は<code class="inlineCode">10px</code>とします。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 2, 4"></code></pre>
    <p class="jsDescription__body__text">
      タイル配置を行う要素を特定し、横並びのためのスタイルを付与します。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 5, 7"></code></pre>
    <p class="jsDescription__body__text">
      子要素を変数に格納します。<br />
      <code class="inlineCode">children</code
      >で取得した値はそのままでは反復処理ができないため、<code
        class="inlineCode"
        >Array.from()</code
      >で配列に変換します。<br />
      反復処理を行い、全ての子要素に基本のスタイルを付与していきます。<br />
      子要素の表示に影響を与えないよう、<code class="inlineCode">div</code
      >要素で囲んでからスタイルを付与しています。<br />
      内容は最初に定義した設定変数による横幅指定・余白指定です。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 8, 21"></code></pre>
    <p class="jsDescription__body__text">
      子要素の配列を行毎に分割していきます。<br />
      本デモでは３列になるため、子要素の配列を３つずつ切り出していき、切り出し終えたところでループを終えるようにしています。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 22, 25"></code></pre>
    <p class="jsDescription__body__text">
      行毎に反復処理を行なっていきます。<br />
      １行目はそのまま表示すればよいため、早期に処理を終了します。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 26, 27"></code></pre>
    <p class="jsDescription__body__text">
      １つ前の行の要素配列に対して反復処理を行い、それぞれの終了位置を<code
        class="inlineCode"
        >getBoundingClientRect().bottom</code
      >で取得します。<br />
      さらにその中で一番下になっている要素の位置を取得します。<br />
      <code class="inlineCode">Math.max</code
      >は引数に配列は受け取れないため、<code class="inlineCode">apply</code
      >というメソッドを通して配列を渡せるようにしています。<br />
      現在の行の要素配列に対して反復処理を行い、隙間がある（=
      <code class="inlineCode"
        >prevEndPositions[index] - prevMaxEndPosition</code
      >）場合には上に詰めるようにします。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 28, 37"></code></pre>
    <p class="jsDescription__body__text">
      最終行まで処理したら、タイル配置全体の高さを設定します。<br />
      これは「最終行の要素の中で一番下になっている要素の位置」から「タイル配置要素の開始位置」を引くことで求めることができます。<br />
    </p>
    <pre
      class="jsDescription__body__code"
    ><code class="language-js" data-js-selector="quote" data-js-attributes="jscopyand, 38, 47"></code></pre>
  </div>
</div>
`; %>

<!-- prettier-ignore -->
<%- include('../_ejsModules/itemLayout', { localTitle, demo, demoScript, howToUse, jsDescription }) %>
